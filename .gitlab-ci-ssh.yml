stages:
  - post_merge

post_merge_job:
  stage: post_merge
  variables:
    GIT_TERMINAL_PROMPT: "0"
  script:
    # Extract the source branch name from the merge commit
    - SOURCE_BRANCH=$(git log -1 --pretty=%B | grep -oP "Merge branch '\K[^']+")
    # - SOURCE_BRANCH="feature/ft10"
    - echo "Source branch that was merged:" $SOURCE_BRANCH
    
    # Configure git
    - git config --global user.email "16069257+KennyTC@users.noreply.github.com"
    - git config --global user.name "GitLab CI Bot"
    
    # Setup SSH for GitHub
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    # Write the SSH key - handle both File and Variable types
    - |
      if [ -f "$GITHUB_SSH_PRIVATE_KEY" ]; then
        # If it's a file type variable
        echo "SSH key is a file, copying..."
        cp "$GITHUB_SSH_PRIVATE_KEY" ~/.ssh/id_rsa
      else
        # If it's a regular variable, write it (remove carriage returns)
        echo "SSH key is a variable, writing..."
        echo "$GITHUB_SSH_PRIVATE_KEY" | tr -d '\r' > ~/.ssh/id_rsa
      fi
    - chmod 600 ~/.ssh/id_rsa
    # Add GitHub to known hosts
    - ssh-keyscan github.com >> ~/.ssh/known_hosts
    - chmod 644 ~/.ssh/known_hosts
    - echo "SSH key configured"

    # Debug: Check SSH key
    # - echo "Checking SSH private key file..."
    # - ls -la ~/.ssh/
    # - echo "First line of private key:"
    # - head -n 1 ~/.ssh/id_rsa
    # - echo "Last line of private key:"
    # - tail -n 1 ~/.ssh/id_rsa
    # - echo "SSH key fingerprint:"
    # - ssh-keygen -l -f ~/.ssh/id_rsa || echo "Failed to get fingerprint"
    
    # Debug: Check SSH key
    - echo "Checking SSH private key file..."
    - ls -la ~/.ssh/
    - echo "Number of lines in key file:"
    - wc -l ~/.ssh/id_rsa
    - echo "First line of private key:"
    - head -n 1 ~/.ssh/id_rsa
    - echo "Last line of private key:"
    - tail -n 1 ~/.ssh/id_rsa
    - echo "Checking for carriage returns or special characters:"
    - cat -A ~/.ssh/id_rsa | head -n 3
    - echo "SSH key fingerprint:"
    - ssh-keygen -l -f ~/.ssh/id_rsa 2>&1 || echo "Failed to get fingerprint - key may be invalid"
    
    # Test SSH connection with verbose output
    - echo "Testing SSH connection to GitHub..."
    - ssh -vT git@github.com 2>&1 || true
    
    # Add GitHub remote using SSH
    - git remote add github git@github.com:KennyTC/sync_from_gitlab.git || git remote set-url github git@github.com:KennyTC/sync_from_gitlab.git
    
    # Fetch from GitHub
    - git fetch github
    
    # # Test push - create a simple test file and push to GitHub
    # - echo "Testing SSH authentication to GitHub at $(date)" > test_push_ssh.txt
    # - git checkout -b test-push-ssh-branch
    # - git add test_push_ssh.txt
    # - git commit -m "Test SSH push from GitLab CI"
    # - git push github test-push-ssh-branch
    # - echo "Test SSH push successful!"
    
    # Checkout GitHub main branch
    - git checkout -b temp-github-main github/main
    
    # Get the commits that were just merged into develop/2025
    - git fetch origin $CI_COMMIT_REF_NAME
    - git checkout origin/$CI_COMMIT_REF_NAME
    
    # Merge the current state of develop/2025 into GitHub main
    - git checkout temp-github-main
    - git merge --no-ff --allow-unrelated-histories origin/$CI_COMMIT_REF_NAME -m "Sync from GitLab $CI_COMMIT_REF_NAME (merged $SOURCE_BRANCH)"
    
    # Create release branch based on the source branch name
    - RELEASE_BRANCH="release/$SOURCE_BRANCH"
    - git checkout -b $RELEASE_BRANCH
    
    # Push the release branch to GitHub using SSH
    - git push github $RELEASE_BRANCH
    
    # Create a Pull Request using GitHub API
    - echo "Creating pull request on GitHub..."
    # Debug: Check if GITHUB_TOKEN is set
   
  
  only:
    - develop/2025
  
  when: on_success

