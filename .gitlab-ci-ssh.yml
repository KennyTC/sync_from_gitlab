stages:
  - pre_merge

pre_merge_job:
  stage: pre_merge
  variables:
    GIT_TERMINAL_PROMPT: "0"
    CHECK_INTERVAL: "60"  # Check every 60 seconds
    MAX_WAIT_TIME: "7200"  # Maximum wait time: 2 hours (7200 seconds)
  script:
    # Get the source branch name from the merge request
    - SOURCE_BRANCH=$CI_MERGE_REQUEST_SOURCE_BRANCH_NAME
    - echo "Source branch" $SOURCE_BRANCH
    - echo "Target branch:" $CI_MERGE_REQUEST_TARGET_BRANCH_NAME
    - echo "MR Title:" $CI_MERGE_REQUEST_TITLE
    
    # Configure git
    - git config --global user.email "16069257+KennyTC@users.noreply.github.com"
    - git config --global user.name "GitLab Bot"
    
    # Setup SSH for GitHub
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    # Write the SSH key - handle both File and Variable types
    - |
      if [ -f "$GITHUB_SSH_PRIVATE_KEY" ]; then
        # If it's a file type variable
        echo "SSH key is a file, copying..."
        cp "$GITHUB_SSH_PRIVATE_KEY" ~/.ssh/id_rsa
      else
        # If it's a regular variable, write it (remove carriage returns)
        echo "SSH key is a variable, writing..."
        echo "$GITHUB_SSH_PRIVATE_KEY" | tr -d '\r' > ~/.ssh/id_rsa
      fi
    - chmod 600 ~/.ssh/id_rsa
    # Add GitHub to known hosts
    - ssh-keyscan github.com >> ~/.ssh/known_hosts
    - chmod 644 ~/.ssh/known_hosts
    - echo "SSH key configured"
    
    # Debug: Check SSH key
    - echo "Checking SSH private key file..."
    - ls -la ~/.ssh/
    - echo "Number of lines in key file:"
    - wc -l ~/.ssh/id_rsa
    - echo "First line of private key:"
    - head -n 1 ~/.ssh/id_rsa
    - echo "Last line of private key:"
    - tail -n 1 ~/.ssh/id_rsa
    - echo "Checking for carriage returns or special characters:"
    - cat -A ~/.ssh/id_rsa | head -n 3
    - echo "SSH key fingerprint:"
    - ssh-keygen -l -f ~/.ssh/id_rsa 2>&1 || echo "Failed to get fingerprint - key may be invalid"
    
    # Test SSH connection with verbose output
    - echo "Testing SSH connection to GitHub..."
    - ssh -vT git@github.com 2>&1 || true
    
    # Add GitHub remote using SSH
    - git remote add github git@github.com:KennyTC/sync_from_gitlab.git || git remote set-url github git@github.com:KennyTC/sync_from_gitlab.git
    
    # Fetch from GitHub
    - git fetch github
    
    # Checkout GitHub main branch
    - git checkout -b temp-github-main github/main
    
    # Fetch the source branch that will be merged
    - git fetch origin $SOURCE_BRANCH
    
    # Get the current state of the target branch (develop/2025)
    - git fetch origin $CI_MERGE_REQUEST_TARGET_BRANCH_NAME
    
    # Simulate the merge that will happen on develop/2025
    - git checkout temp-github-main
    - git merge --no-ff --allow-unrelated-histories origin/$SOURCE_BRANCH -m "Sync from GitLab"
    
    # Create release branch based on the source branch name
    - RELEASE_BRANCH="release/$SOURCE_BRANCH"
    - git checkout -b $RELEASE_BRANCH
    
    # Push the release branch to GitHub using SSH
    - git push github $RELEASE_BRANCH
    
    # Create a Pull Request using GitHub API
    - echo "Creating pull request on GitHub..."
    # Check if GITHUB_TOKEN is set
    - |
      if [ -z "$GITHUB_TOKEN" ]; then
        echo "ERROR:GITHUB_TOKEN is not set. Cannot create pull request."
        exit 1
      fi
    - echo "GITHUB_TOKEN is set " $GITHUB_TOKEN
    - COMMIT_LIST=$(git log origin/$CI_MERGE_REQUEST_TARGET_BRANCH_NAME..origin/$SOURCE_BRANCH --pretty=format:'%h %s')
    - PR_RESPONSE=$(curl -s -X POST -H "Authorization:token ${GITHUB_TOKEN}" -H "Accept:application/vnd.github.v3+json" https://api.github.com/repos/KennyTC/sync_from_gitlab/pulls -d "{\"title\":\"Sync from GitLab:$SOURCE_BRANCH\",\"head\":\"$RELEASE_BRANCH\",\"base\":\"main\",\"body\":\"Automated sync from GitLab.\\n\\nSource branch:\`$SOURCE_BRANCH\`\\nMerged into:\`$CI_COMMIT_REF_NAME\`\\n\\nCommits:\\n\`\`\`\\n$COMMIT_LIST\\n\`\`\`\"}")
    - echo "$PR_RESPONSE"
    
    # Extract PR number and URL from response
    - PR_NUMBER=$(echo "$PR_RESPONSE" | grep -o '"number":[[:space:]]*[0-9]*' | grep -o '[0-9]*' | head -1)
    #- PR_NUMBER=$(echo "$PR_RESPONSE" | grep -o '"number":[0-9]*' | grep -o '[0-9]*' | head -1)
    #- PR_URL=$(echo "$PR_RESPONSE" | grep -o '"html_url":"[^"]*"' | head -1 | cut -d'"' -f4)
    - echo "‚úÖ Pull Request created successfully!" $PR_NUMBER
    
    # Verify PR number was captured
    - |
      if [ -z "$PR_NUMBER" ]; then
        echo "‚ùåERROR Failed to capture PR number from response"
        echo "PR Response was:" $PR_RESPONSE
        exit 1
      fi
    
    # Wait for PR to be merged on GitHub
    - echo ""
    - echo "‚è≥ Waiting for GitHub PR" $PR_NUMBER
    - echo "üîç Will check every" ${CHECK_INTERVAL}
    - echo "‚è±Ô∏è Maximum wait time:" ${MAX_WAIT_TIME} 
    - echo ""
    - ELAPSED_TIME=0
    - MERGED=false
    - |
      while [ $ELAPSED_TIME -lt $MAX_WAIT_TIME ]; do
        echo "‚è∞ Checking PR status... (elapsed:" ${ELAPSED_TIME}"s /" ${MAX_WAIT_TIME}"s)"
        
        # Query GitHub API for PR status
        PR_STATUS=$(curl -s -H "Authorization:token ${GITHUB_TOKEN}" -H "Accept:application/vnd.github.v3+json" https://api.github.com/repos/KennyTC/sync_from_gitlab/pulls/$PR_NUMBER)
        echo "PR Status:" $PR_STATUS
        # Check if PR is merged (handle JSON with spaces)
        MERGED_CHECK=$(echo "$PR_STATUS" | grep -o '"merged"[[:space:]]*:[[:space:]]*true')
        echo "MERGED_CHECK:" $MERGED_CHECK
        MERGED_AT=$(echo "$PR_STATUS" | grep -o '"merged_at"[[:space:]]*:[[:space:]]*"[^"]*"' | sed 's/.*"merged_at"[[:space:]]*:[[:space:]]*"\([^"]*\)".*/\1/')
        echo "MERGED_AT:" $MERGED_AT
        STATE=$(echo "$PR_STATUS" | grep -o '"state"[[:space:]]*:[[:space:]]*"[^"]*"' | sed 's/.*"state"[[:space:]]*:[[:space:]]*"\([^"]*\)".*/\1/')
        echo "STATE:" $STATE
        
        if [ ! -z "$MERGED_CHECK" ] || [ ! -z "$MERGED_AT" ] && [ "$MERGED_AT" != "null" ]; then
          echo ""
          echo ""
          echo "üéâüéâüéâ SUCCESS! PR MERGED! üéâüéâüéâ"
          echo "=========================================="
          echo "‚úÖ GitHub Pull Request #" $PR_NUMBER "has been MERGED!"
          echo "üîó Branch:" $RELEASE_BRANCH
          echo "üìÖ Merged at:" $MERGED_AT
          echo "=========================================="
          echo ""
          MERGED=true
          break
        elif [ "$STATE" = "closed" ]; then
          echo ""
          echo "‚ùåERROR:GitHub Pull Request" $PR_NUMBER "was CLOSED without merging!"
          echo "Cannot proceed with GitLab merge."
          exit 1
        else
          echo "Status:OPEN-still waiting... (next check in" ${CHECK_INTERVAL}"s)"
          sleep $CHECK_INTERVAL
          ELAPSED_TIME=$((ELAPSED_TIME + CHECK_INTERVAL))
        fi
      done
    
    # Check if we timed out
    - |
      if [ "$MERGED" != "true" ]; then
        echo ""
        echo "Please check the PR status manually and run this job again if needed."
        exit 1
      fi
    
    # GitHub PR is merged - now merge to GitLab develop/2025
    - echo ""
    - echo "üîÑ GitHub PR is merged! Now merging to GitLab develop/2025..."
    - echo ""
    
    # Configure GitLab remote (should already be configured)
    - git remote -v
    
    # Fetch latest develop/2025
    - git fetch origin develop/2025
    
    # Checkout develop/2025
    - git checkout -B develop/2025 origin/develop/2025
    
    # Merge the source branch into develop/2025
    - echo "Merging" $SOURCE_BRANCH "into develop/2025..."
    - git merge --no-ff origin/$SOURCE_BRANCH -m "Auto-merge from $SOURCE_BRANCH after GitHub PR"
    
    # Push the merge to GitLab
    - echo "Pushing to origin/develop/2025..."
    - git push origin develop/2025
    
    - echo ""
    - echo "‚úÖ‚úÖ‚úÖ COMPLETE! ‚úÖ‚úÖ‚úÖ"
    - echo "=========================================="
    - echo "‚úÖ GitHub PR #" $PR_NUMBER
    - echo "‚úÖ GitLab branch" $SOURCE_BRANCH
    - echo "=========================================="
    - echo ""
  
  timeout: 3h  # Allow up to 3 hours for the entire job
  
  rules:
    # Only run for merge requests targeting develop/2025
    # Requires manual trigger - click "Play" button after MR is approved
    - if: $CI_PIPELINE_SOURCE == "merge_request_event" && $CI_MERGE_REQUEST_TARGET_BRANCH_NAME == "develop/2025"
      when: manual